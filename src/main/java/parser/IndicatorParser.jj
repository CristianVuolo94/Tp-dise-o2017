options {
    LOOKAHEAD = 100;
}

PARSER_BEGIN(IndicatorParser)
package parser;
import java.io.ByteArrayInputStream;
import java.nio.charset.StandardCharsets;

import math.*;
import modelo.IndicatorRepository;

public class IndicatorParser {
	public static Operable parseIndicator(String formula){
		Operable value = null;
		IndicatorParser.ReInit(new ByteArrayInputStream(formula.getBytes(StandardCharsets.UTF_8)));
		try{
			value = IndicatorParser.Start();
		} catch(Exception e){
			System.out.println(e);
		}
		return value;
	}
}

PARSER_END(IndicatorParser)

SKIP :
{
  " "
}

TOKEN : /* LITERALS */
{
  < CONSTANT: (["0"-"9"])+ ("."(["0"-"9"])+)? >
}

TOKEN : /* IDENTIFIERS */
{
  < INDICATOR: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])* >
  |
  < CALCULATION: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])* >
}

/** Main production. */
Operable Start()       : {Operable exp;}
{
  exp = Expression()
  { return exp; }
}

Operable Expression() : {Operable op1, op2;}
{
    (op1 = Term() "+" op2 = Expression()) {return new Addition(op1, op2);} 
    |
    (op1 = Term() "-" op2 = Expression()) {return new Subtraction(op1, op2);}
    |
    op1 = Term() {return op1;}
}

Operable Term() : {Operable op1, op2;}
{
    (op1 = Factor() "*" op2 = Term()) {return new Multiplication(op1, op2);} 
    |
    (op1 = Factor() "/" op2 = Term()) {return new Division(op1, op2);}
    |
    op1 = Factor() {return op1;}
}

Operable Factor() : {Operable op1;}
{
    ("(" op1 = Expression() ")") {return op1;} 
    |
    op1 = Constant() {return op1;}
    |
    op1 = Identifier() {return op1;}
}

/** An Identifier. */
Operable Identifier() : {Operable op;}
{
	(op = Indicator() | op = Calculation()) {return op;}
}

Operable Indicator() : {Token t;}
{
	"@" t=<INDICATOR> { return IndicatorRepository.getIndicator(t.image); }
}

Operable Calculation() : {Token t;}
{
	"#" t=<CALCULATION> { return new OperableCalculation(t.image);}
}

/** A Constant. */
Constant Constant()       : {Token t;}
{
  t=<CONSTANT> { return new Constant(Double.parseDouble(t.image)); }
}
